# Exercise 1
# Using a while loop, create a list numbers that contains the numbers 0 through 35. Your while loop should initialize a counter variable to 0. On each iteration, the loop should append the current value of the counter to the list and the counter should increase by 1. The while loop should stop when the counter is greater than 35.

numbers = []
counter = 0
while counter <= 35:
    numbers.append(counter)
    counter += 1


# Exercise 2
# Create a while loop that initializes a counter at 0 and will run until the counter reaches 50. If the value of the counter is divisible by 10, append the value to the list, tens.


counter = 0
tens = []
while counter <= 50:
    if counter % 10 == 0:
        tens.append(counter)
    counter += 1


# Exercise 3
# Write a function, sublist, that takes in a list of numbers as the parameter. In the function, use a while loop to return a sublist of the input list. The sublist should contain the same values of the original list up until it reaches the number 5 (it should not contain the number 5).

def sublist(lst):
    n = 0
    newlist = []
    while n < len(lst) and lst[n] != 5:
            newlist.append(lst[n])
            n += 1
    return newlist


# Exercise 4
# Below is a for loop that works. Underneath the for loop, rewrite the problem so that it does the same thing, but using a while loop instead of a for loop. Assign the accumulated total in the while loop code to the variable sum2. Once complete, sum2 should equal sum1.


sum1 = 0
lst = [65, 78, 21, 33]

#for x in lst:
#    sum1 = sum1 + x

x = 0
sum2 = 0
while x < len(lst):
    sum2 = sum2 + lst[x]
    x += 1
print(sum2)


# Exercise 5
# Challenge: Write a function called beginning that takes a list as input and contains a while loop that only stops once the element of the list is the string ‘bye’. What is returned is a list that contains up to the first 10 strings, regardless of where the loop stops. (i.e., if it stops on the 32nd element, the first 10 are returned. If “bye” is the 5th element, the first 4 are returned.) If you want to make this even more of a challenge, do this without slicing

def beginning(lst):
    n = 0
    newlst = []
    while n < 10:
        if lst[n] == 'bye':
            break
        elif lst[n] != 'bye':
            newlst.append(lst[n])
        n += 1
    return newlst
