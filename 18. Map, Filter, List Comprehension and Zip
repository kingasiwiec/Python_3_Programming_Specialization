# Exercise 1
# Write equivalent code using map instead of the manual accumulation below and assign it to the variable test.


things = [3, 5, -4, 7]

accum = []
for thing in things:
    accum.append(thing+1)
print(accum)

test = map(lambda x: x+1, things)
print(test)


# Exercise 2
# Use manual accumulation to define the lengths function below.


def lengths(strings):
    """lengths takes a list of strings as input and returns a list of numbers that are the lengths
    of strings in the input list. Use manual accumulation!"""
    # fill in this function's definition to make the test pass.
    lens = []
    for s in strings:
        lens.append(len(s))
    return lens


# Exercise 3
# Now define lengths using map instead.

def lengths(strings):
    """lengths takes a list of strings as input and returns a list of numbers that are the lengths
     of strings in the input list. Use map!"""
     # fill in this function's definition to make the test pass.
    lens = map(lambda s: len(s), strings)
    return lens


# Exercise 4
# Now define lengths using a list comprehension instead.

def lengths(strings):
    """lengths takes a list of strings as input and returns a list of numbers that are the lengths
    of strings in the input list. Use a list comprehension!"""
    # fill in this function's definition to make the test pass.
    lens = [len(s) for s in strings]
    return lens


# Exercise 5
# Write a function called positives_Acc that receives list of numbers as the input (like [3, -1, 5, 7]) and returns a list of only the positive numbers, [3, 5, 7], via manual accumulation.

things = [3, 5, -4, 7]
def positives_Acc(lst):
    positives = []
    for l in lst:
        if l > 0:
            positives.append(l)
    return positives


# Exercise 6
# Write a function called positives_Fil that receives list of things as the input and returns a list of only the positive things, [3, 5, 7], using the filter function.

things = [3, 5, -4, 7]
def positives_Fil(lst):
    l = filter(lambda a: a > 0, lst)
    return l


# Exercise 7
# Write a function called positives_Li_Com that receives list of things as the input and returns a list of only the positive things, [3, 5, 7], using the list comprehension.

things = [3, 5, -4, 7]

def positives_Li_Com(lst):
    return [l for l in lst if l > 0]



# Exercise 8
# Define longwords using filter - Return a shorter list of strings containing only the strings with more than four characters. Use the filter function.

def longwords_Fil(strings):
    return filter(lambda s: len(s) > 4, strings)


# Exercise 9
# Define longwords using a list comprehension - Return a shorter list of strings containing only the strings with more than four characters. Use the filter function.

def longwords_Li_Comp(strings):
    return [s for s in strings if len(s) > 4]


# Exercise 10
# Write a function called longlengths that returns the lengths of those strings that have at least 4 characters. Try it with a list comprehension.

def longlengths(strings):
    return [len(s) for s in strings if len(s) > 4]


# Exercise 11
# Write a function called longlengths that returns the lengths of those strings that have at least 4 characters. Try it using map and filter.


def longlengths(strings):
    l = map(lambda s: len(s), filter(lambda s: len(s) > 4, strings))
    return l

# Exercise 12
# Write a function that takes a list of numbers and returns the sum of the squares of all the numbers. Try it using map and sum.

def sumSquares(L):
    return sum(map(lambda num: num**2, L))

nums = [3, 2, 2, -1, 1]


# Exercise 13
# Use the zip function to take the lists below and turn them into a list of tuples, with all the first items in the first tuple, etc.

L1 = [1, 2, 3, 4]
L2 = [4, 3, 2, 3]
L3 = [0, 5, 0, 5]

tups = []

tups = list(zip(L1, L2, L3))

# Exercise 14
# Use zip and map or a list comprehension to make a list consisting the maximum value for each position. For L1, L2, and L3, you would end up with a list [4, 5, 3, 5].

L1 = [1, 2, 3, 4]
L2 = [4, 3, 2, 3]
L3 = [0, 5, 0, 5]

maxs = []

maxs = map(lambda num: max(num), zip(L1, L2, L3))
# maxs = [max(num) for num in zip(L1, L2, L3)]  # alternative way


# Exercise 14
# Write code to assign to the variable compri_sample all the values of the key name in the dictionary tester if they are Juniors. Do this using list comprehension.


tester = {'info': [{"name": "Lauren", 'class standing': 'Junior', 'major': "Information Science"},{'name': 'Ayo', 'class standing': "Bachelor's", 'major': 'Information Science'}, {'name': 'Kathryn', 'class standing': 'Senior', 'major': 'Sociology'}, {'name': 'Nick', 'class standing': 'Junior', 'major': 'Computer Science'}, {'name': 'Gladys', 'class standing': 'Sophomore', 'major': 'History'}, {'name': 'Adam', 'major': 'Violin Performance', 'class standing': 'Senior'}]}

compri_sample = [d['name'] for d in tester['info'] if d['class standing']=='Junior']


# Exercise 15
# Challenge The nested for loop given takes in a list of lists and combines the elements into a single list. Do the same thing using a list comprehension for the list L. Assign it to the variable result2.

def onelist(lst):
    result = []
    for each_list in lst:
        for item in each_list:
            result.append(item)
    return result

L = [["hi", "bye"], ["hello", "goodbye"], ["hola", "adios", "bonjour", "au revoir"]]

result2 = [each_list for lst in L for each_list in lst]
print(result2)


# Exercise 16
# Challenge: Write code to assign to the variable class_sched all the values of the key important classes. Do this using list comprehension.

tester = {'info': [
         {"name": "Lauren", 'class standing': 'Junior', 'major': "Information Science", 'important classes': ['SI 106', 'ENGLISH 125', 'SI 110', 'AMCULT 202']},
         {'name': 'Ayo', 'class standing': "Bachelor's", 'major': 'Information Science', "important classes": ['SI 106', 'SI 410', 'PSYCH 111']},
         {'name': 'Kathryn', 'class standing': 'Senior', 'major': 'Sociology', 'important classes': ['WOMENSTD 220', 'SOC 101', 'ENS 384']},
         {'name': 'Nick', 'class standing': 'Junior', 'major': 'Computer Science', "important classes": ['SOC 101', 'AMCULT 334', 'EECS 281']},
         {'name': 'Gladys', 'class standing': 'Sophomore', 'major': 'History', 'important classes': ['ENGLISH 125', 'HIST 259', 'ENGLISH 130']},
         {'name': 'Adam', 'major': 'Violin Performance', 'class standing': 'Senior', 'important classes': ['PIANO 101', 'STUDIO 300', 'THEORY 229', 'MUSC 356']}]}


class_sched = [d['important classes'] for d in tester['info'] for d['important classes'] in d['important classes']]
print(class_sched)


# Exercise 17
# Challenge: Below, we have provided a list of lists that contain numbers. Using list comprehension, create a new list threes that contains all the numbers from the original list that are divisible by 3. This can be accomplished in one line of code.

nums = [[4, 3, 12, 10], [8, 7, 6], [5, 18, 15, 7, 11], [9, 4], [24, 20, 17], [3, 5]]

threes = [num for lst in nums for num in lst if num % 3 == 0]
print(threes)


# Exercise 18
# Below, we have provided a list of strings called countries. Use filter to produce a list called b_countries that only contains the strings from countries that begin with B.

countries = ['Canada', 'Mexico', 'Brazil', 'Chile', 'Denmark', 'Botswana', 'Spain', 'Britain', 'Portugal', 'Russia', 'Thailand', 'Bangladesh', 'Nigeria', 'Argentina', 'Belarus', 'Laos', 'Australia', 'Panama', 'Egypt', 'Morocco', 'Switzerland', 'Belgium']

b_countries = filter(lambda c: c[0] == 'B', countries)


# Exercise 19
# Below, we have provided a list of tuples that contain the names of Game of Thrones characters. Using list comprehension, create a list of strings called first_names that contains only the first names of everyone in the original list.

people = [('Snow', 'Jon'), ('Lannister', 'Cersei'), ('Stark', 'Arya'), ('Stark', 'Robb'), ('Lannister', 'Jamie'), ('Targaryen', 'Daenerys'), ('Stark', 'Sansa'), ('Tyrell', 'Margaery'), ('Stark', 'Eddard'), ('Lannister', 'Tyrion'), ('Baratheon', 'Joffrey'), ('Bolton', 'Ramsey'), ('Baelish', 'Peter')]

first_names = [t[1] for t in people]


# Exercise 20
# Below, we have provided a list of tuples that contain studentsâ€™ names and their final grades in PYTHON 101. Using list comprehension, create a new list passed that contains the names of students who passed the class (had a final grade of 70 or greater).

students = [('Tommy', 95), ('Linda', 63), ('Carl', 70), ('Bob', 100), ('Raymond', 50), ('Sue', 75)]

passed = [s[0] for s in students if s[1] >= 70]


# Exercise 21
# Write code using zip and filter so that these lists (l1 and l2) are combined into one big list and assigned to the variable opposites if they are both longer than 3 characters each.

l1 = ['left', 'up', 'front']
l2 = ['right', 'down', 'back']

opposites = filter(lambda i: len(i[0]) > 3 and len(i[1]) > 3, zip(l1, l2))
print(opposites)


# Exercise 22
# Below, we have provided a species list and a population list. Use zip to combine these lists into one list of tuples called pop_info. From this list, create a new list called endangered that contains the names of species whose populations are below 2500.

species = ['golden retriever', 'white tailed deer', 'black rhino', 'brown squirrel', 'field mouse', 'orangutan', 'sumatran elephant', 'rainbow trout', 'black bear', 'blue whale', 'water moccasin', 'giant panda', 'green turtle', 'blue jay', 'japanese beetle']

population = [10000, 90000, 1000, 2000000, 500000, 500, 1200, 8000, 12000, 2300, 7500, 100, 1800, 9500, 125000]

pop_info = list(zip(species, population))
endangered = [species for species, population in pop_info if population < 2500]
print(endangered)
