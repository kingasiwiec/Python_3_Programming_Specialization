# Exercise 1
# A year is a leap year if it is divisible by 4. If the year can be evenly divided by 100, it is NOT a leap year, unless the year is also evenly divisible by 400.
#Then it is a leap year. Write code that asks the user to input a year and output True if it’s a leap year, or False otherwise. Use if statements.

year = int(input("Enter a year"))

if (year % 4 == 0):
    if (year % 100 == 0):
        if (year % 400 == 0):
            print("Leap year")
        else:
            print("Not a leap")
    else:
        print("Leap year")
else:
    print("Not a leap")



# Exercise 2
# Give the logical opposites of these conditions, meaning an expression that would produce False whenever this expression produces True, and vice versa. 
# You are not allowed to use the not operator.
# a > b
# a >= b
# a >= 18  and  day == 3
# a >= 18  or  day != 3

a = input("Enter a")
b = input("Enter b")

if a > b:
    print(False)
else:
    print(True)

if a >= b:
    print(False)
else:
    print(True)

day = input("Enter day")
if a >= 18 and day == 3:
    print(False)
else:
    print(True)

if a >= 18 or day != 3:
    print(False)
else:
    print(True)



# Exercise 3
# Provided is a list of numbers. For each of the numbers in the list, determine whether they are even. If the number is even, add True to a new list called is_even. 
# If the number is odd, then add False.


num_lst = [3, 20, -1, 9, 10]
is_even = []

for num in num_lst:
    if num % 2 == 0:
        num = True
        is_even.append(num)
    else:
        num = False
        is_even.append(num)
print(is_even)



# Exercise 4
# Given the lengths of three sides of a triange, determine whether the triangle is right angled. If it is, the assign True to the variable is_rightangled. 
# If it’s not, then assign False to the variable is_rightangled.
# Hint: floating point arithmetic is not always exactly accurate, so it is not safe to test floating point numbers for equality. 
#If a good programmer wants to know whether x is equal or close enough to y, they would probably code it up as
# if  abs(x - y) < 0.001:      # if x is approximately equal to y

a = 5
b = 6
c = 8

is_rightangled = 0
if (a*a + b*b) == (c*c):
    is_rightangled = True
else:
    is_rightangled = False
print(is_rightangled)



# Exercise 5
# Implement the calculator for the date of Easter.
# The following algorithm computes the date for Easter Sunday for any year between 1900 to 2099.
# Ask the user to enter a year. Compute the following:
# a = year % 19
# b = year % 4
# c = year % 7
# d = (19 * a + 24) % 30
# e = (2 * b + 4 * c + 6 * d + 5) % 7
# dateofeaster = 22 + d + e
# Special note: The algorithm can give a date in April. You will know that the date is in April if the calculation gives you an answer greater than 31. (You’ll need to adjust) Also, if the year is one of four special years (1954, 1981, 2049, or 2076) then subtract 7 from the date.
# Your program should print an error message if the user provides a date that is out of range.


year = int(input("Enter a year"))

if year >= 1900 and year <= 2099:
    a = year % 19
    b = year % 4
    c = year % 7
    d = (19 * a + 24) % 30
    e = (2 * b + 4 * c + 6 * d + 5) % 7
    dateofeaster = 22 + d + e

    if year == 1954 or year == 1981 or year == 2049 or year == 2076:
        dateofeaster = dateofeaster - 7

    if dateofeaster > 31:
        print("April", dateofeaster - 31)
    else:
        print("March", dateofeaster)
else:
    print("Year out of range")



# Exercise 6
# Get the user to enter some text and print out True if it’s a palindrome, False otherwise. 
#(Hint: Start by reversing the input string, and then use the == operator to compare two values to see if they are the same)


text = input("Enter some text")
print(text)
inverse = len(text)
inversedtext = text[inverse:: -1]
print(inversedtext)

if inversedtext == text:
    print(True)
else:
    print(False)



# Exercise 7
# The variable sentence stores a string. Write code to determine how many words in sentence start and end with the same letter, including one-letter words. 
# Store the result in the variable same_letter_count.


sentence = "students flock to the arb for a variety of outdoor activities such as jogging and picnicking"

same_letter_count = 0
for word in sentence.split():
    if word[0] == word[-1]:
        same_letter_count += 1



# Exercise 8
# Write code that counts the number of words in sentence that contain either an “a” or an “e”. Store the result in the variable num_a_or_e.
# Note 1: be sure to not double-count words that contain both an a and an e.
# HINT 1: Use the in operator.
# HINT 2: You can either use or or elif.

sentence = "python is a high level general purpose programming language that can be applied to many different classes of problems."

num_a_or_e = 0
for word in sentence.split():
    if "a" in word or "e" in word:
        num_a_or_e += 1
    elif "a" in word and "e" in word:
        num_a_or_e +=2
print(num_a_or_e)



# Exercise 9
# Write code that will count the number of vowels in the sentence s and assign the result to the variable num_vowels. 
# For this problem, vowels are only a, e, i, o, and u. Hint: use the in operator with vowels.


s = "singing in the rain and playing in the rain are two entirely different situations but both can be fun"
vowels = ['a','e','i','o','u']

# Write your code here.

num_vowels = 0
for letter in s:
    if letter in vowels:
        num_vowels += 1
print(num_vowels)



# Exercise 10
# For each string in wrd_lst, find the number of characters in the string. If the number of characters is less than 6, add 1 to accum so that in the end, 
# accum will contain an integer representing the total number of words in the list that have fewer than 6 characters.


wrd_lst = ["Hello", "activecode", "Java", "C#", "Python", "HTML and CSS", "Javascript", "Swift", "php"]

accum = 0
for string in wrd_lst:
    lenght = len(string)
    if lenght < 6:
        accum += 1
print(accum)
