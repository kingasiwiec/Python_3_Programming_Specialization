# Exercise 1
# In XYZ University, upper level math classes are numbered 300 and up. Upper level English classes are numbered 200 and up. Upper level Psychology classes are 400 and up. 
# Create two lists, upper and lower. Assign each course in classes to the correct list, upper or lower. HINT: remember, you can convert some strings to different types!


classes = ["MATH 150", "PSYCH 111", "PSYCH 313", "PSYCH 412", "MATH 300", "MATH 404", "MATH 206", "ENG 100", "ENG 103", "ENG 201", "PSYCH 508", "ENG 220", "ENG 125", "ENG 124"]
upper = []
lower = []

for cl in classes:
    if cl[0:4] == "MATH":
        if int(cl[5:]) >= 300:
            upper.append(cl)
        else:
            lower.append(cl)
    elif cl[0:3] == "ENG":
        if int(cl[4:]) >= 200:
            upper.append(cl)
        else:
            lower.append(cl)
    elif cl[0:5] == "PSYCH":
        if int(cl[6:]) >= 400:
            upper.append(cl)
        else:
            lower.append(cl)

print(upper)
print(lower)



# Exercise 2
# The module keyword determines if a string is a keyword. e.g. keyword.iskeyword(s) where s is a string will return either True or False, depending on 
# whether or not the string is a Python keyword. Import the keyword module and test to see whether each of the words in list test are keywords. 
# Save the respective answers in a list, keyword_test.


import keyword
test = ["else", "integer", "except", "elif"]

keyword_test = []
for word in test:
    if keyword.iskeyword(word) == True:
        keyword_test.append(True)
    else:
        keyword_test.append(False)
print(keyword_test)



# Exercise 3
# The string module provides sequences of various types of Python characters. It has an attribute called digits that produces the string ‘0123456789’. 
# Import the module and assign this string to the variable nums. Below, we have provided a list of characters called chars. Using nums and chars, 
# produce a list called is_num that consists of tuples. The first element of each tuple should be the character from chars, and the second element should be a Boolean
# that reflects whether or not it is a Python digit.


import string
chars = ['h', '1', 'C', 'i', '9', 'True', '3.1', '8', 'F', '4', 'j']
nums = string.digits

is_num = []
yesno = []
for char in chars:
    if char in nums:
        yesno.append(True)
    else:
        yesno.append(False)

is_num = zip(chars, yesno)
print(is_num)



# Exercise 4
# For each string in wrds, add ‘ed’ to the end of the word (to make the word past tense). Save these past tense words to a list called past_wrds.


wrds = ["end", 'work', "play", "start", "walk", "look", "open", "rain", "learn", "clean"]

past_wrds = []

for word in wrds:
    word = word + "ed"
    past_wrds.append(word)
print(past_wrds)



# Exercise 5
# Write code to create a list of word lengths for the words in original_str using the accumulation pattern and assign the answer to a variable num_words_list. 


original_str = "The quick brown rhino jumped over the extremely lazy fox"
second_str = original_str.split()
num_words_list = []

for word in second_str:
    lenght = len(word)
    num_words_list.append(lenght)
print(num_words_list)



# Exercise 6
# Below are a set of scores that students have received in the past semester. Write code to determine how many are 90 or above and assign that result to the value a_scores.


scores = "67 80 90 78 93 20 79 89 96 97 92 88 79 68 58 90 98 100 79 74 83 88 80 86 85 70 90 100"

a_scores = 0
for score in scores.split():
    if int(score) >= 90:
        a_scores = a_scores + 1
print(a_scores)



# Exercise 7
# Write code that uses the string stored in org and creates an acronym which is assigned to the variable acro. Only the first letter of each word should be used, 
# each letter in the acronym should be a capital letter, and there should be nothing to separate the letters of the acronym. 
# Words that should not be included in the acronym are stored in the list stopwords. For example, if org was assigned the string “hello to world” 
# then the resulting acronym should be “HW”.


stopwords = ['to', 'a', 'for', 'by', 'an', 'am', 'the', 'so', 'it', 'and', "The"]
org = "The organization for health, safety, and education"
acro = ""

for word in org.split():
    if word not in stopwords:
        acro = acro + word[0]
        acro = acro.upper()
print(acro)



# Exercise 8
# Write code that uses the string stored in sent and creates an acronym which is assigned to the variable acro. The first two letters of each word should be used, 
# each letter in the acronym should be a capital letter, and each element of the acronym should be separated by a “. ” (dot and space). 
# Words that should not be included in the acronym are stored in the list stopwords. For example, if sent was assigned the string “height and ewok wonder” 
# then the resulting acronym should be “HE. EW. WO”.


stopwords = ['to', 'a', 'for', 'by', 'an', 'am', 'the', 'so', 'it', 'and', 'The']
sent = "The water earth and air are vital"
acro = ""

for word in sent.split():
    if word not in stopwords:
        acro = acro + word[0:2] + ". "
        acro = acro.upper()

acro = acro[:-2]
print(acro)



# Exercise 9
# A palindrome is a phrase that, if reversed, would read the exact same. Write code that checks if p_phrase is a palindrome by reversing it and then checking 
# if the reversed version is equal to the original. Assign the reversed version of p_phrase to the variable r_phrase so that we can check your work.


p_phrase = "was it a car or a cat I saw"
r_phrase = ""

strlen = len(p_phrase)
r_phrase = p_phrase[strlen:: -1]
print(r_phrase)

if p_phrase == r_phrase:
    print(True)
else:
    print(False)



# Exercise 10
# Provided is a list of data about a store’s inventory where each item in the list represents the name of an item, how much is in stock, and how much it costs. 
# Print out each item in the list with the same formatting, using the .format method (not string concatenation). 
# For example, the first print statment should read The store has 12 shoes, each for 29.99 USD.


inventory = ["shoes, 12, 29.99", "shirts, 20, 9.99", "sweatpants, 25, 15.00", "scarves, 13, 7.75"]

for item in inventory:
    number = item.split(",")[1]
    name = item.split(",")[0]
    price = item.split(",")[2]
    print("The store has{} {}, each for{} USD.".format(number, name, price))
